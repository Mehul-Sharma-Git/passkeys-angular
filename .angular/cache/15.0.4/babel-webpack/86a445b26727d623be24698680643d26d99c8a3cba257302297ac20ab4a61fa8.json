{"ast":null,"code":"import _asyncToGenerator from \"/Users/mehulsharma/projects/practice/passkeys-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class TodoService {\n  constructor() {\n    this.api = environment.todo.api;\n  }\n  /**\n   * function to add a todo\n   * @param todo - todo to add\n   * @returns added todo\n   */\n  addTodo(todo) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const res = yield fetch(`${_this.api}/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todo)\n      });\n      return yield res.json();\n    })();\n  }\n  /**\n   * function to list todos\n   * @returns list of todos\n   */\n  listTodos() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const res = yield fetch(`${_this2.api}/user/1`);\n      const {\n        todos\n      } = yield res.json();\n      return todos;\n    })();\n  }\n  /**\n   * function to update a todo\n   * @param todo - todo to update\n   * @returns updated todo\n   */\n  updateTodo(todo) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const res = yield fetch(`${_this3.api}/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todo)\n      });\n      return yield res.json();\n    })();\n  }\n  /**\n   * function to delete a todo\n   * @param id - id of todo to delete\n   * @returns deleted todo\n   */\n  deleteTodo(id) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const res = yield fetch(`${_this4.api}/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return yield res.json();\n    })();\n  }\n}\nTodoService.ɵfac = function TodoService_Factory(t) {\n  return new (t || TodoService)();\n};\nTodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoService,\n  factory: TodoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,WAAW,QAAQ,6BAA6B;;AAkBzD,OAAM,MAAOC,WAAW;EAuDtBC;IAtDC,QAAG,GAAGF,WAAW,CAACG,IAAI,CAACC,GAAG;EAsDZ;EArDf;;;;;EAKMC,OAAO,CAACF,IAAU;IAAA;IAAA;MACtB,MAAMG,GAAG,SAASC,KAAK,CAAC,GAAG,KAAI,CAACH,GAAG,MAAM,EAAE;QACzCI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;SACjB;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI;OAC1B,CAAC;MACF,aAAaG,GAAG,CAACO,IAAI,EAAE;IAAC;EAC1B;EACA;;;;EAIMC,SAAS;IAAA;IAAA;MACb,MAAMR,GAAG,SAASC,KAAK,CAAC,GAAG,MAAI,CAACH,GAAG,SAAS,CAAC;MAC7C,MAAM;QAAEW;MAAK,CAAE,SAAST,GAAG,CAACO,IAAI,EAAE;MAClC,OAAOE,KAAK;IAAC;EACf;EACA;;;;;EAKMC,UAAU,CAACb,IAAU;IAAA;IAAA;MACzB,MAAMG,GAAG,SAASC,KAAK,CAAC,GAAG,MAAI,CAACH,GAAG,SAAS,EAAE;QAC5CI,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;SACjB;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI;OAC1B,CAAC;MACF,aAAaG,GAAG,CAACO,IAAI,EAAE;IAAC;EAC1B;EACA;;;;;EAKMI,UAAU,CAACC,EAAU;IAAA;IAAA;MACzB,MAAMZ,GAAG,SAASC,KAAK,CAAC,GAAG,MAAI,CAACH,GAAG,IAAIc,EAAE,EAAE,EAAE;QAC3CV,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;;OAEnB,CAAC;MACF,aAAaH,GAAG,CAACO,IAAI,EAAE;IAAC;EAC1B;;AAtDWZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["environment","TodoService","constructor","todo","api","addTodo","res","fetch","method","headers","body","JSON","stringify","json","listTodos","todos","updateTodo","deleteTodo","id","factory","providedIn"],"sourceRoot":"","sources":["/Users/mehulsharma/projects/practice/passkeys-angular/src/app/todo.service.ts"],"sourcesContent":["// .src/app/todo.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n/**\n * Define todo type\n */\nexport interface Todo {\n  id?: number;\n  todo?: string;\n  completed: boolean;\n  userId?: number;\n}\n/**\n * Define todos type\n */\nexport type Todos = Todo[];\n@Injectable({\n  providedIn: 'root',\n})\nexport class TodoService {\n   api = environment.todo.api;\n  /**\n   * function to add a todo\n   * @param todo - todo to add\n   * @returns added todo\n   */\n  async addTodo(todo: Todo): Promise<Todo> {\n    const res = await fetch(`${this.api}/add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(todo),\n    });\n    return await res.json();\n  }\n  /**\n   * function to list todos\n   * @returns list of todos\n   */\n  async listTodos(): Promise<Todos> {\n    const res = await fetch(`${this.api}/user/1`);\n    const { todos } = await res.json();\n    return todos;\n  }\n  /**\n   * function to update a todo\n   * @param todo - todo to update\n   * @returns updated todo\n   */\n  async updateTodo(todo: Todo): Promise<Todo> {\n    const res = await fetch(`${this.api}/update`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(todo),\n    });\n    return await res.json();\n  }\n  /**\n   * function to delete a todo\n   * @param id - id of todo to delete\n   * @returns deleted todo\n   */\n  async deleteTodo(id: number): Promise<Todo> {\n    const res = await fetch(`${this.api}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    return await res.json();\n  }\n  constructor() {}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}