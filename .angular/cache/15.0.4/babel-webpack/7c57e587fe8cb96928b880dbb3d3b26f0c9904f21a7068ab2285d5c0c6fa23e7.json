{"ast":null,"code":"import _asyncToGenerator from \"/Users/mehulsharma/projects/practice/passkeys-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { startRegistration } from '@simplewebauthn/browser';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../auth.service\";\nexport class RegisterComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    // define component state\n    this.API = environment.api;\n    this.userData = {\n      id: '',\n      name: '',\n      displayName: ''\n    };\n    this.username = '';\n    this.attestationResponse = {};\n    this.isLoading = false;\n  }\n  ngOnInit() {}\n  // function to update username\n  updateUsername(event) {\n    this.username = event.target.value;\n    console.log({\n      username: this.username\n    });\n  }\n  // function to generate registration options\n  generateRegistrationOptions() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield fetch(`${_this.API}/generate-registration-options?username=${_this.username}`);\n        const creationOptions = yield res.json();\n        _this.userData = creationOptions.user;\n        console.log({\n          creationOptions,\n          user: _this.authService.userData\n        });\n        try {\n          _this.attestationResponse = yield startRegistration(creationOptions);\n          console.log({\n            attestationResponse: _this.attestationResponse\n          });\n        } catch (error) {\n          console.log({\n            error\n          });\n          throw error;\n        }\n      } catch (error) {\n        console.log({\n          error\n        });\n      }\n    })();\n  }\n  // function to verify registration\n  verifyRegistration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield fetch(`${_this2.API}/verify-registration`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: _this2.userData.id,\n            attestationResponse: _this2.attestationResponse\n          })\n        });\n        const verification = yield res.json();\n        console.log({\n          verification\n        });\n        if (verification.verified) {\n          alert('Registration successful! Proceed to login');\n          _this2.authService.userData.name = _this2.userData.name;\n          // redirect to login\n          _this2.router.navigate(['/login']);\n        } else {\n          alert('Registration failed! Please try again.');\n        }\n      } catch (error) {\n        console.log({\n          error\n        });\n      }\n    })();\n  }\n  // function to register\n  register(event) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      event.preventDefault();\n      _this3.isLoading = true;\n      yield _this3.generateRegistrationOptions();\n      yield _this3.verifyRegistration();\n      _this3.isLoading = false;\n    })();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 17,\n  vars: 2,\n  consts: [[1, \"site-section\"], [1, \"wrapper\"], [1, \"my-6\"], [1, \"font-bold\", \"text-4xl\"], [1, \"register-form\", \"flex\", \"flex-col\", \"gap-4\", 3, \"submit\"], [1, \"form-control\"], [\"for\", \"username\"], [\"type\", \"text\", \"type\", \"username\", \"name\", \"username\", \"required\", \"\", 1, \"input\", 3, \"value\", \"change\"], [1, \"action-cont\"], [\"type\", \"submit\", 1, \"cta\"], [\"routerLink\", \"/login\", 1, \"link\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"header\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \"Register\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"form\", 4);\n      i0.ɵɵlistener(\"submit\", function RegisterComponent_Template_form_submit_5_listener($event) {\n        return ctx.register($event);\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 7);\n      i0.ɵɵlistener(\"change\", function RegisterComponent_Template_input_change_9_listener($event) {\n        return ctx.updateUsername($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"button\", 9);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"p\");\n      i0.ɵɵtext(14, \"Or \");\n      i0.ɵɵelementStart(15, \"a\", 10);\n      i0.ɵɵtext(16, \"Login\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.username);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Loading...\" : \"Register\", \" \");\n    }\n  },\n  dependencies: [i1.RouterLink],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["startRegistration","environment","RegisterComponent","constructor","router","authService","api","id","name","displayName","ngOnInit","updateUsername","event","username","target","value","console","log","generateRegistrationOptions","res","fetch","API","creationOptions","json","userData","user","attestationResponse","error","verifyRegistration","method","headers","body","JSON","stringify","verification","verified","alert","navigate","register","preventDefault","isLoading","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/mehulsharma/projects/practice/passkeys-angular/src/app/register/register.component.ts","/Users/mehulsharma/projects/practice/passkeys-angular/src/app/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { startRegistration } from '@simplewebauthn/browser';\nimport { AuthService, User } from '../auth.service';\nimport { environment } from '../../environments/environment';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  // define component state\n  API = environment.api;\n  userData: User = {\n    id: '',\n    name: '',\n    displayName: '',\n  };\n  username = '';\n  attestationResponse = {};\n  isLoading = false;\n\n  ngOnInit(): void {}\n  constructor(private router: Router, private authService: AuthService) {}\n\n  // function to update username\n  updateUsername(event: any) {\n    this.username = event.target.value;\n    console.log({ username: this.username });\n  }\n\n  // function to generate registration options\n  async generateRegistrationOptions() {\n    try {\n      const res = await fetch(\n        `${this.API}/generate-registration-options?username=${this.username}`\n      );\n      const creationOptions = await res.json();\n      this.userData = creationOptions.user;\n      console.log({ creationOptions, user: this.authService.userData });\n      try {\n        this.attestationResponse = await startRegistration(creationOptions);\n        console.log({ attestationResponse: this.attestationResponse });\n      } catch (error) {\n        console.log({ error });\n        throw error;\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  // function to verify registration\n  async verifyRegistration() {\n    try {\n      const res = await fetch(`${this.API}/verify-registration`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: this.userData.id,\n          attestationResponse: this.attestationResponse,\n        }),\n      });\n      const verification = await res.json();\n      console.log({ verification });\n      if (verification.verified) {\n        alert('Registration successful! Proceed to login');\n        this.authService.userData.name = this.userData.name;\n        // redirect to login\n        this.router.navigate(['/login']);\n      } else {\n        alert('Registration failed! Please try again.');\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  // function to register\n  async register(event: any) {\n    event.preventDefault();\n    this.isLoading = true;\n    await this.generateRegistrationOptions();\n    await this.verifyRegistration();\n    this.isLoading = false;\n  }\n}","<!-- ./src/app/register/register.component.html -->\n<section class=\"site-section\">\n    <div class=\"wrapper\">\n      <header class=\"my-6\">\n        <h1 class=\"font-bold text-4xl\">Register</h1>\n      </header>\n      <form (submit)=\"register($event)\" class=\"register-form flex flex-col gap-4\">\n        <div class=\"form-control\">\n          <label for=\"username\">Username</label>\n          <input\n            value=\"{{ username }}\"\n            (change)=\"updateUsername($event)\"\n            type=\"text\"\n            type=\"username\"\n            name=\"username\"\n            class=\"input\"\n            required\n          />\n        </div>\n        <div class=\"action-cont\">\n          <button class=\"cta\" type=\"submit\">\n            {{ isLoading ? \"Loading...\" : \"Register\" }}\n          </button>\n        </div>\n        <p>Or <a routerLink=\"/login\" class=\"link\">Login</a></p>\n      </form>\n    </div>\n  </section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}