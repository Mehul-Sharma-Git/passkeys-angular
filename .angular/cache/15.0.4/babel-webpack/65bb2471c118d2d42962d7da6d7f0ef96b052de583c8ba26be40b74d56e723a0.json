{"ast":null,"code":"import _asyncToGenerator from \"/Users/mehulsharma/projects/practice/passkeys-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { startAuthentication } from '@simplewebauthn/browser';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../auth.service\";\nexport class LoginComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    this.API = environment.api;\n    this.username = this.authService.userData.name || '';\n    this.assertionResponse = {};\n    this.isLoading = false;\n  }\n  // function to update username\n  updateUsername(event) {\n    this.username = event.target.value;\n    console.log({\n      username: this.username\n    });\n  }\n  // function to generate authentication options\n  generateAuthenticationOptions() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield fetch(`${_this.API}/generate-authentication-options?username=${_this.username}`);\n        const authOptions = yield res.json();\n        try {\n          _this.assertionResponse = yield startAuthentication(authOptions);\n          console.log({\n            assertionResponse: _this.assertionResponse\n          });\n        } catch (error) {\n          console.log({\n            error\n          });\n          throw error;\n        }\n      } catch (error) {\n        console.log({\n          error\n        });\n      }\n    })();\n  }\n  // function to verify authentication\n  verifyAuthentication() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield fetch(`${_this2.API}/verify-authentication`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: _this2.username,\n            assertionResponse: _this2.assertionResponse\n          })\n        });\n        const data = yield res.json();\n        // if authentication is successful, set user data and call the redirect function\n        if (data.verified) {\n          _this2.authService.userData = {\n            id: data.user.id,\n            name: data.user.username,\n            displayName: data.user.username\n          };\n          alert(`Authentication successful! Welcome back ${data.user.username}!`);\n          _this2.redirectAfterLogin(data);\n        } else {\n          alert('Authentication failed. Please try again.');\n        }\n      } catch (error) {\n        console.log({\n          error\n        });\n      }\n    })();\n  }\n  // function to authenticate user on form submit\n  authenticate(event) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      event.preventDefault();\n      _this3.isLoading = true;\n      yield _this3.generateAuthenticationOptions();\n      yield _this3.verifyAuthentication();\n      // get user id and set cookie\n      let id = _this3.authService.userData.id;\n      document.cookie = `id=${id}`;\n      console.log({\n        id,\n        cookie: document.cookie\n      });\n      _this3.isLoading = false;\n    })();\n  }\n  redirectAfterLogin(event) {\n    console.log('redirecting after login', {\n      event\n    });\n    // call loggedIn frunction to update auth service state\n    this.authService.isLoggedin();\n    this.router.navigate(['/todo']);\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["startAuthentication","environment","LoginComponent","constructor","router","authService","api","userData","name","updateUsername","event","username","target","value","console","log","generateAuthenticationOptions","res","fetch","API","authOptions","json","assertionResponse","error","verifyAuthentication","method","headers","body","JSON","stringify","data","verified","id","user","displayName","alert","redirectAfterLogin","authenticate","preventDefault","isLoading","document","cookie","isLoggedin","navigate","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/mehulsharma/projects/practice/passkeys-angular/src/app/login/login.component.ts","/Users/mehulsharma/projects/practice/passkeys-angular/src/app/login/login.component.html"],"sourcesContent":["// ./src/app/login/login.component.ts\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { startAuthentication } from '@simplewebauthn/browser';\nimport { environment } from '../../environments/environment';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  API = environment.api;\n  username = this.authService.userData.name || '';\n  assertionResponse = {};\n  isLoading = false;\n  constructor(private router: Router, private authService: AuthService) {}\n  // function to update username\n  updateUsername(event: any) {\n    this.username = event.target.value;\n    console.log({ username: this.username });\n  }\n  // function to generate authentication options\n  async generateAuthenticationOptions() {\n    try {\n      const res = await fetch(\n        `${this.API}/generate-authentication-options?username=${this.username}`\n      );\n      const authOptions = await res.json();\n      try {\n        this.assertionResponse = await startAuthentication(authOptions);\n        console.log({ assertionResponse: this.assertionResponse });\n      } catch (error) {\n        console.log({ error });\n        throw error;\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n  // function to verify authentication\n  async verifyAuthentication() {\n    try {\n      const res = await fetch(`${this.API}/verify-authentication`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: this.username,\n          assertionResponse: this.assertionResponse,\n        }),\n      });\n      const data = await res.json();\n      // if authentication is successful, set user data and call the redirect function\n      if (data.verified) {\n        this.authService.userData = {\n          id: data.user.id,\n          name: data.user.username,\n          displayName: data.user.username,\n        };\n        alert(`Authentication successful! Welcome back ${data.user.username}!`);\n\n        this.redirectAfterLogin(data);\n      } else {\n        alert('Authentication failed. Please try again.');\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n  // function to authenticate user on form submit\n  async authenticate(event: any) {\n    event.preventDefault();\n    this.isLoading = true;\n    await this.generateAuthenticationOptions();\n    await this.verifyAuthentication();\n    // get user id and set cookie\n    let id = this.authService.userData.id;\n    document.cookie = `id=${id}`;\n    console.log({ id, cookie: document.cookie });\n    this.isLoading = false;\n  }\n  redirectAfterLogin(event: any) {\n    console.log('redirecting after login', { event });\n    // call loggedIn frunction to update auth service state\n    this.authService.isLoggedin();\n    this.router.navigate(['/todo']);\n  }\n}","<p>login works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}