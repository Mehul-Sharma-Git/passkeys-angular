{"ast":null,"code":"import _asyncToGenerator from \"/Users/mehulsharma/projects/practice/passkeys-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this._userData = {\n      id: '',\n      name: '',\n      displayName: ''\n    };\n    this.API = environment.api;\n    this.userData = this._userData;\n  }\n  // function to check if user is logged in\n  isLoggedin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // get user data\n        _this.userData = yield _this.userInfo();\n        // console.log({ userData: this.userData });\n        if (!_this.userData.id) throw new Error('no user id, not logged in');\n        return true;\n        // A valid JWT is in place so that the user object was able to be fetched.\n      } catch (error) {\n        console.log({\n          error\n        });\n        return false;\n      }\n    })();\n  }\n  // function to get user data\n  userInfo() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // get user id from cookie\n        let id = '';\n        const cookies = document.cookie;\n        cookies.split('; ').forEach(cookie => {\n          const [key, value] = cookie.split('=');\n          if (key === 'id') {\n            id = value;\n          }\n        });\n        // get user data from api\n        const res = yield fetch(`${_this2.API}/user?id=${id || _this2.userData.id}`);\n        const user = yield res.json();\n        // set user data in service\n        _this2.userData = {\n          displayName: user.username,\n          id: user.id,\n          name: user.username\n        };\n        // return user data\n        return _this2.userData;\n      } catch (error) {\n        console.log({\n          error,\n          user: _this2.userData\n        });\n        return _this2.userData;\n      }\n    })();\n  }\n  // function to log user out\n  logOut() {\n    // remove user id from cookie\n    document.cookie = 'id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    // reset user data\n    this.userData = this._userData;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,6BAA6B;;AASzD,OAAM,MAAOC,WAAW;EAyDtBC;IAxDA,cAAS,GAAS;MAAEC,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAE,CAAE;IACvD,QAAG,GAAGL,WAAW,CAACM,GAAG;IACrB,aAAQ,GAAS,IAAI,CAACC,SAAS;EAsDhB;EApDf;EACMC,UAAU;IAAA;IAAA;MACd,IAAI;QACF;QACA,KAAI,CAACC,QAAQ,SAAS,KAAI,CAACC,QAAQ,EAAE;QACrC;QACA,IAAI,CAAC,KAAI,CAACD,QAAQ,CAACN,EAAE,EAAE,MAAM,IAAIQ,KAAK,CAAC,2BAA2B,CAAC;QACnE,OAAO,IAAI;QACX;OACD,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC;UAAEF;QAAK,CAAE,CAAC;QACtB,OAAO,KAAK;;IACb;EACH;EACA;EACMF,QAAQ;IAAA;IAAA;MACZ,IAAI;QACF;QACA,IAAIP,EAAE,GAAG,EAAE;QACX,MAAMY,OAAO,GAAGC,QAAQ,CAACC,MAAM;QAC/BF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEF,MAAM,IAAI;UACrC,MAAM,CAACG,GAAG,EAAEC,KAAK,CAAC,GAAGJ,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;UACtC,IAAIE,GAAG,KAAK,IAAI,EAAE;YAChBjB,EAAE,GAAGkB,KAAK;;QAEd,CAAC,CAAC;QAEF;QACA,MAAMC,GAAG,SAASC,KAAK,CAAC,GAAG,MAAI,CAACC,GAAG,YAAYrB,EAAE,IAAI,MAAI,CAACM,QAAQ,CAACN,EAAE,EAAE,CAAC;QACxE,MAAMsB,IAAI,SAASH,GAAG,CAACI,IAAI,EAAE;QAE7B;QACA,MAAI,CAACjB,QAAQ,GAAG;UACdJ,WAAW,EAAEoB,IAAI,CAACE,QAAQ;UAC1BxB,EAAE,EAAEsB,IAAI,CAACtB,EAAE;UACXC,IAAI,EAAEqB,IAAI,CAACE;SACZ;QAED;QACA,OAAO,MAAI,CAAClB,QAAQ;OACrB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC;UAAEF,KAAK;UAAEa,IAAI,EAAE,MAAI,CAAChB;QAAQ,CAAE,CAAC;QAC3C,OAAO,MAAI,CAACA,QAAQ;;IACrB;EACH;EACA;EACAmB,MAAM;IACJ;IACAZ,QAAQ,CAACC,MAAM,GAAG,qDAAqD;IACvE;IACA,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACF,SAAS;EAChC;;AAxDWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["environment","AuthService","constructor","id","name","displayName","api","_userData","isLoggedin","userData","userInfo","Error","error","console","log","cookies","document","cookie","split","forEach","key","value","res","fetch","API","user","json","username","logOut","factory","providedIn"],"sourceRoot":"","sources":["/Users/mehulsharma/projects/practice/passkeys-angular/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\nexport type User = {\n  id: string;\n  name: string;\n  displayName: string;\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  _userData: User = { id: '', name: '', displayName: '' };\n  API = environment.api;\n  userData: User = this._userData;\n\n  // function to check if user is logged in\n  async isLoggedin(): Promise<boolean> {\n    try {\n      // get user data\n      this.userData = await this.userInfo();\n      // console.log({ userData: this.userData });\n      if (!this.userData.id) throw new Error('no user id, not logged in');\n      return true;\n      // A valid JWT is in place so that the user object was able to be fetched.\n    } catch (error) {\n      console.log({ error });\n      return false;\n    }\n  }\n  // function to get user data\n  async userInfo() {\n    try {\n      // get user id from cookie\n      let id = '';\n      const cookies = document.cookie;\n      cookies.split('; ').forEach((cookie) => {\n        const [key, value] = cookie.split('=');\n        if (key === 'id') {\n          id = value;\n        }\n      });\n\n      // get user data from api\n      const res = await fetch(`${this.API}/user?id=${id || this.userData.id}`);\n      const user = await res.json();\n\n      // set user data in service\n      this.userData = {\n        displayName: user.username,\n        id: user.id,\n        name: user.username,\n      };\n\n      // return user data\n      return this.userData;\n    } catch (error) {\n      console.log({ error, user: this.userData });\n      return this.userData;\n    }\n  }\n  // function to log user out\n  logOut() {\n    // remove user id from cookie\n    document.cookie = 'id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    // reset user data\n    this.userData = this._userData;\n  }\n  constructor() {}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}